openapi: 3.0.0
info:
  title: 'Restaurants API'
  version: 1.0.0
  description: 'API for restaurant management. Admins can create and update restaurants, while users can add reviews and mark restaurants as favorites.'
paths:
  /restaurants:
    get:
      summary: 'Get all restaurants'
      responses:
        '200':
          description: 'A list of restaurants'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Restaurant'
    post:
      summary: 'Add a restaurant'
      security:
        - BasicAuth: ['admin']
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantCreateRequest'
      responses:
        '200':
          description: 'The restaurant was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /restaurants/:id:
    get:
      summary: 'Get a restaurant by ID'
      parameters:
        - name: 'id'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: 'A restaurant'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
    put:
      summary: 'Update a restaurant'
      security:
        - BasicAuth: ['admin']
      parameters:
        - name: 'id'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantUpdateRequest'
      responses:
        '200':
          description: 'The restaurant was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Restaurant not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /restaurants/:id/reviews:
    get:
      summary: 'Get reviews for a restaurant'
      parameters:
        - name: 'id'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: 'A list of reviews'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Review'
    post:
      summary: 'Add a review'
      security:
        - BasicAuth: []
      parameters:
        - name: 'id'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreateRequest'
      responses:
        '200':
          description: 'The review was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      summary: 'Login'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 'A JWT token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/register:
    post:
      summary: 'Register'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: 'A JWT token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /me:
    get:
      summary: 'Get current user'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'The current user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /me/reviews:
    get:
      summary: 'Get reviews by current user'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'A list of reviews'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Review'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /me/reviews/:id:
    put:
      summary: 'Update a review'
      security:
        - BasicAuth: []
      parameters:
        - name: 'id'
          in: 'path'
          required: true
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewUpdateRequest'
      responses:
        '200':
          description: 'The review was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Review not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: 'Delete a review'
      security:
        - BasicAuth: []
      parameters:
        - name: 'id'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '202':
          description: 'No content'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Review not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /me/favorites:
    get:
      summary: 'Get favorite restaurants'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'A list of restaurants'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Restaurant'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /me/favorites/:restaurantId:
    post:
      summary: 'Add a restaurant to favorites'
      security:
        - BasicAuth: []
      parameters:
        - name: 'restaurantId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '202':
          description: 'The restaurant was added to favorites'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Restaurant not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: 'Remove a restaurant from favorites'
      security:
        - BasicAuth: []
      parameters:
        - name: 'restaurantId'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '202':
          description: 'The restaurant was removed from favorites'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Restaurant not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Restaurant:
      type: 'object'
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the restaurant
        name:
          type: string
          description: Name of the restaurant
        neighborhood:
          type: string
          nullable: true
          description: Neighborhood where the restaurant is located
        photograph:
          type: string
          nullable: true
          description: URL or path to the restaurant's photograph
        address:
          type: string
          nullable: true
          description: Street address of the restaurant
        lat:
          type: number
          format: float
          nullable: true
          description: Latitude coordinate
        lng:
          type: number
          format: float
          nullable: true
          description: Longitude coordinate
        image:
          type: string
          nullable: true
          description: URL or path to an image of the restaurant
        cuisineType:
          type: string
          nullable: true
          description: Type of cuisine served by the restaurant
        operatingHours:
          type: array
          items:
            $ref: '#/components/schemas/OperatingHours'
          description: Operating hours for the restaurant
      required:
        - id
        - name
    RestaurantCreateRequest:
      type: 'object'
      properties:
        name:
          type: 'string'
        neighborhood:
          type: 'string'
        photograph:
          type: 'string'
        address:
          type: 'string'
        lat:
          type: 'number'
        lng:
          type: 'number'
        image:
          type: 'string'
        cuisineType:
          type: 'string'
        operatingHours:
          type: 'array'
          items:
            $ref: '#/components/schemas/OperatingHoursCreateRequest'
      required:
        - name
    RestaurantUpdateRequest:
      type: 'object'
      properties:
        name:
          type: 'string'
        neighborhood:
          type: 'string'
        photograph:
          type: 'string'
        address:
          type: 'string'
        lat:
          type: 'number'
        lng:
          type: 'number'
        image:
          type: 'string'
        cuisineType:
          type: 'string'
        operatingHours:
          type: 'array'
          items:
            $ref: '#/components/schemas/OperatingHoursUpdateRequest'
    OperatingHours:
      type: 'object'
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the opening hours
        day:
          type: string
          description: Day of the week (e.g., "Monday")
        hours:
          type: string
          description: Operating hours for the restaurant on the given day (e.g., "9:00 AM - 10:00 PM")
      required:
        - id
        - day
        - hours
    OperatingHoursCreateRequest:
      type: 'object'
      properties:
        day:
          type: 'string'
        hours:
          type: 'string'
      required:
        - day
        - hours
    OperatingHoursUpdateRequest:
      type: 'object'
      properties:
        id:
          type: 'integer'
        day:
          type: 'string'
        hours:
          type: 'string'
    Review:
      type: 'object'
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the review
        restaurantId:
          type: integer
          format: int64
          description: ID of the restaurant this review belongs to
        userId:
          type: integer
          format: int64
          description: ID of the user who wrote the review
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating given to the restaurant (1 to 5)
        comments:
          type: string
          nullable: true
          description: User’s review comments
        date:
          type: string
          format: date-time
          description: Date the review was written
    ReviewCreateRequest:
      type: 'object'
      properties:
        rating:
          type: 'integer'
        comments:
          type: 'string'
      required:
        - rating
    ReviewUpdateRequest:
      type: 'object'
      properties:
        rating:
          type: 'integer'
        comments:
          type: 'string'
    TokenResponse:
      type: 'object'
      properties:
        token:
          type: 'string'
    LoginRequest:
      type: 'object'
      properties:
        email:
          type: 'string'
        password:
          type: 'string'
    CreateUserRequest:
      type: 'object'
      properties:
        email:
          type: 'string'
        name:
          type: 'string'
        password:
          type: 'string'
      required:
        - email
        - name
        - password
    User:
      type: 'object'
      properties:
        id:
          type: 'integer'
          format: int64
          description: Unique identifier for the user
        email:
          type: 'string'
          description: User's email address
        name:
          type: 'string'
          description: User's name
        role:
          type: 'string'
          description: User's role
    Error:
      type: 'object'
      properties:
        status:
          type: 'number'
        message:
          type: 'string'

  securitySchemes:
    BasicAuth:
      type: 'http'
      scheme: 'basic'
